' Set up Roles
activate GuiExeSer
note over GuiExeSer: GuiExecutionServer

activate ExeSerG
note over ExeSerG: ExecutionServer-gRPC

activate DbEngine
note over DbEngine: DatabaseEngine

activate ChEngine
note over ChEngine: ChannelExecutionEngine

activate ChDbEngi
note over ChDbEngi: ChannelDatabaseEngine

activate Worker
note over Worker: ExecutionWorker

GuiExeSer -> ExeSerG: InformThatThereAreNewTestCasesOnExecutionQueue
ExeSerG -> ExeSerG: MessagePreparation
ExeSerG -> DbEngine: prepareInformThatThereAreNewTestCasesOnExecutionQueueSaveToCloudDB


DbEngine -> DbEngine: 1) loadTestCaseExecutionQueueMessages \n2)saveTestCasesOnOngoingExecutionsQueueSaveToCloudDB \n3) clearTestCasesExecutionQueueSaveToCloudDB \n4) loadTestCaseModelAndTestInstructionsAndTestInstructionContainersToBeAddedToExecutionQueueLoadFromCloudDB \n5) SaveTestInstructionsToExecutionQueueSaveToCloudDB \n6) saveTestInstructionAttributesUnderExecutionSaveToCloudDB
DbEngine ->> ChEngine: .\n***ChannelCommandCheckTestInstructionExecutionQueue***  Triggers (A)

ExeSerG <-- DbEngine :AckNack
deactivate DbEngine

GuiExeSer <-- ExeSerG: AckNack
deactivate ExeSerG
deactivate GuiExeSer

ChEngine -> ChDbEngi: (A) prepareInitiateExecutionsForTestInstructionsOnExecutionQueueSaveToCloudDB\n(testCaseExecutionsToProcess)

ChDbEngi -> ChDbEngi: 1) loadTestInstructionExecutionQueueMessages\n(testCaseExecutionsToProcess)  \n2) saveTestInstructionsInOngoingExecutionsSaveToCloudDB\n(testInstructionExecutionQueueMessages) \n3) clearTestInstructionExecutionQueueSaveToCloudDB\n(testInstructionExecutionQueueMessages)

alt:  TestInstructionExecutions, under execution, are waiting to be sent to Worker
ChEngine <<-- ChDbEngi : ***ChannelCommandCheckNewTestInstructionExecutions*** Triggers (B)

ChEngine -> ChDbEngi :(B) sendNewTestInstructionsThatIsWaitingToBeSentWorker

ChDbEngi -> ChDbEngi: 1) loadNewTestInstructionToBeSentToExecutionWorkers \n2) transformRawTestInstructionsAndAttributeIntoGrpcMessages

ChDbEngi -> Worker: 3) sendTestInstructionExecutionsToWorker
ChDbEngi <-- Worker: AnkNack
deactivate Worker

ChDbEngi -> ChDbEngi: 4) updateStatusOnTestInstructionsExecutionInCloudDB \n5) updateStatusOnTestCasesExecutionInCloudDB (To 'Executing')

ChEngine <-- ChDbEngi :(AckNack)

else: All individual TestInstructionExecutions have been executed and are finished
ChEngine <<-- ChDbEngi :***ChannelCommandUpdateFinalExecutionStatusOnTestCaseExecutionExecutions*** Trigger (C)

ChEngine -> ChDbEngi :(C) updateStatusOnTestCaseExecutionInCloudDB

ChDbEngi -> ChDbEngi: 1) loadTestInstructionExecutionStatusMessages \n2) transformTestInstructionExecutionStatusIntoTestCaseExecutionStatus \n3) updateTestCaseExecutionsWithNewTestCaseExecutionStatus

ChEngine <-- ChDbEngi :(AckNack)

end

ChEngine <-- ChDbEngi :(AckNack)
deactivate ChDbEngi
deactivate Worker
deactivate ChDbEngi
deactivate ChEngine

' *************************************************************
' *** gRPC-call - ReportCompleteTestInstructionExecutionResult ***
'note over Worker: ExecutionWorker

note over ExeSerG: ExecutionServer-gRPC

note over DbEngine: DatabaseEngine

note over ChEngine: ChannelExecutionEngine

note over ChDbEngi: ChannelDatabaseEngine

activate ExeSerG
ExeSerG <- Worker: gRPC-call ReportCompleteTestInstructionExecutionResult\n(finalTestInstructionExecutionResultMessage)

activate DbEngine
ExeSerG -> DbEngine: prepareReportCompleteTestInstructionExecutionResultSaveToCloudDB\n(finalTestInstructionExecutionResultMessage)

DbEngine -> DbEngine: 1) updateStatusOnTestInstructionsExecutionInCloudDB\n(finalTestInstructionExecutionResultMessage) \n2) loadTestCaseExecutionAndTestCaseExecutionVersion\n(finalTestInstructionExecutionResultMessage)

opt: TestInstructionExecution ended with a 'OK End-status'

activate ChEngine
DbEngine ->> ChEngine: ***ChannelCommandCheckNewTestInstructionExecutions*** Triggers (B)

end

ExeSerG <-- DbEngine :AckNack

Worker <-- ExeSerG :AckNack

activate ChDbEngi

ChEngine -> ChDbEngi :(B) sendNewTestInstructionsThatIsWaitingToBeSentWorker\n(testCaseExecutionsToProcess)

ChDbEngi -> ChDbEngi: 1) loadNewTestInstructionToBeSentToExecutionWorkers\n(testCaseExecutionsToProcess)

alt: There are ongoing TestInstructionExecution waiting to be sent to Worker
ChDbEngi -> ChDbEngi: 2) transformRawTestInstructionsAndAttributeIntoGrpcMessages \n(rawTestInstructionsToBeSentToExecutionWorkers, rawTestInstructionAttributesToBeSentToExecutionWorkers)

ChDbEngi -> ChDbEngi: 3) sendTestInstructionExecutionsToWorker\n(testInstructionsToBeSentToExecutionWorkersAndTheResponse)
ChDbEngi -> Worker: 3.1) SendProcessTestInstructionExecutionToExecutionWorkerServer\n(processTestInstructionExecutionRequest)
ChDbEngi <-- Worker: AnkNack

ChDbEngi -> ChDbEngi: 4) updateStatusOnTestInstructionsExecutionInCloudDB\n(testInstructionsToBeSentToExecutionWorkersAndTheResponse)

ChDbEngi -> ChDbEngi: 5) updateStatusOnTestCasesExecutionInCloudDB\n(testInstructionsToBeSentToExecutionWorkersAndTheResponse)

ChEngine <-- ChDbEngi :(AckNack)
else: There are No ongoing TestInstructionExecution waiting to be sent to Worker

ChDbEngi ->> ChEngine: ***ChannelCommandCheckTestInstructionExecutionQueue*** Triggers (A)

ChEngine <-- ChDbEngi :(AckNack)
end


